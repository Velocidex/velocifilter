{
 "000 query with dicts: SELECT * FROM test()": [
  {
   "bar": 0,
   "foo": 0
  },
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "001 query with ints: SELECT * FROM range(start=10, end=12)": [
  {
   "value": 10
  },
  {
   "value": 11
  },
  {
   "value": 12
  }
 ],
 "002 aliases with shadowed var: SELECT env_var AS EnvVar, foo AS FooColumn FROM test()": [
  {
   "EnvVar": "EnvironmentData",
   "FooColumn": 0
  },
  {
   "EnvVar": "EnvironmentData",
   "FooColumn": 2
  },
  {
   "EnvVar": "EnvironmentData",
   "FooColumn": 4
  }
 ],
 "003 aliases with non-shadowed var: SELECT foo AS FooColumn FROM range(start=1, end=2)": [
  {
   "FooColumn": {
    "bar": {
     "baz": 5
    },
    "bar2": 7
   }
  },
  {
   "FooColumn": {
    "bar": {
     "baz": 5
    },
    "bar2": 7
   }
  }
 ],
 "004 condition on aliases: SELECT foo AS FooColumn FROM test() WHERE FooColumn = 2": [
  {
   "FooColumn": 2
  }
 ],
 "005 condition on aliases with not: SELECT foo AS FooColumn FROM test() WHERE NOT FooColumn = 2": [
  {
   "FooColumn": 0
  },
  {
   "FooColumn": 4
  }
 ],
 "006 condition on non aliases: SELECT foo AS FooColumn FROM test() WHERE foo = 4": [
  {
   "FooColumn": 4
  }
 ],
 "007 dict plugin: SELECT * FROM dict(env_var=15, foo=5)": [
  {
   "env_var": 15,
   "foo": 5
  }
 ],
 "008 dict plugin with invalide column: SELECT no_such_column FROM dict(env_var=15, foo=5)": [
  {
   "no_such_column": null
  }
 ],
 "009 dict plugin with invalide column in expression: SELECT no_such_column + 'foo' FROM dict(env_var=15, foo=5)": [
  {
   "no_such_column + 'foo'": null
  }
 ],
 "010 mix from env and plugin: SELECT env_var + param AS ConCat FROM dict(param='param')": [
  {
   "ConCat": "EnvironmentDataparam"
  }
 ],
 "011 subselects: SELECT param FROM dict(param= { SELECT * FROM range(start=3, end=5)})": [
  {
   "param": [
    {
     "value": 3
    },
    {
     "value": 4
    },
    {
     "value": 5
    }
   ]
  }
 ],
 "012 subselects addition: SELECT q1.value + q2.value AS Sum FROM dict(q1= { SELECT * FROM range(start=3, end=5)}, q2= { SELECT * FROM range(start=10, end=14)})": [
  {
   "Sum": [
    3,
    4,
    5,
    10,
    11,
    12,
    13,
    14
   ]
  }
 ],
 "013 Functions in select expression: SELECT func_foo(return=q1 + 4) FROM dict(q1=3)": [
  {
   "func_foo(return=q1 + 4)": 7
  }
 ],
 "014 Subselect functions.: SELECT bar, query(vql= { SELECT * FROM dict(column=bar)}) AS Query FROM test()": [
  {
   "Query": [
    {
     "column": 0
    }
   ],
   "bar": 0
  },
  {
   "Query": [
    {
     "column": 1
    }
   ],
   "bar": 1
  },
  {
   "Query": [
    {
     "column": 2
    }
   ],
   "bar": 2
  }
 ],
 "015 Subselect functions in filter.: SELECT bar, query(vql= { SELECT * FROM dict(column=bar)}) AS Query FROM test() WHERE 1 IN  Query.column": [
  {
   "Query": [
    {
     "column": 1
    }
   ],
   "bar": 1
  }
 ],
 "016 Subselect in columns: SELECT bar, { SELECT column FROM dict(column=bar) } AS subquery FROM test()": [
  {
   "bar": 0,
   "subquery": 0
  },
  {
   "bar": 1,
   "subquery": 1
  },
  {
   "bar": 2,
   "subquery": 2
  }
 ],
 "017 Create Let expression: LET result=SELECT * FROM test()": [],
 "018 Create Let materialized expression: LET result\u003c=SELECT * FROM test()": [],
 "019 Refer to Let expression: SELECT * FROM result": [
  {
   "bar": 0,
   "foo": 0
  },
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "020 Refer to non existent Let expression: SELECT * FROM no_such_result": [
  null
 ],
 "021 Refer to non existent Let expression by column: SELECT foobar FROM no_such_result": [
  {
   "foobar": null
  }
 ],
 "022 Foreach plugin: SELECT * FROM foreach(row= { SELECT * FROM test()}, query= { SELECT bar, foo, value FROM range(start=bar, end=foo)})": [
  {
   "bar": 0,
   "foo": 0,
   "value": 0
  },
  {
   "bar": 1,
   "foo": 2,
   "value": 1
  },
  {
   "bar": 1,
   "foo": 2,
   "value": 2
  },
  {
   "bar": 2,
   "foo": 4,
   "value": 2
  },
  {
   "bar": 2,
   "foo": 4,
   "value": 3
  },
  {
   "bar": 2,
   "foo": 4,
   "value": 4
  }
 ],
 "023 Foreach plugin with array: SELECT * FROM foreach(row= [dict(bar=1, foo=2), dict(foo=1, bar=2)], query= { SELECT bar, foo FROM scope()})": [
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 2,
   "foo": 1
  }
 ],
 "024 Foreach plugin with single object: SELECT * FROM foreach(row=dict(bar=1, foo=2), query= { SELECT bar, foo FROM scope()})": [
  {
   "bar": 1,
   "foo": 2
  }
 ],
 "025 Query plugin with dots: SELECT * FROM Artifact.Linux.Sys()": [],
 "026 Order by: SELECT * FROM test() ORDER BY foo": [
  {
   "bar": 0,
   "foo": 0
  },
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "027 Order by desc: SELECT * FROM test() ORDER BY foo DESC ": [
  {
   "bar": 2,
   "foo": 4
  },
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 0,
   "foo": 0
  }
 ],
 "028 Limit: SELECT * FROM test() LIMIT 1 ": [
  {
   "bar": 0,
   "foo": 0
  }
 ],
 "029 Limit and order: SELECT * FROM test() ORDER BY foo DESC  LIMIT 1 ": [
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "030 Comments Simple: SELECT * FROM test() LIMIT 1 ": [
  {
   "bar": 0,
   "foo": 0
  }
 ],
 "031 Comments SQL Style: SELECT * FROM test() LIMIT 1 ": [
  {
   "bar": 0,
   "foo": 0
  }
 ],
 "032 Comments Multiline: SELECT * FROM test() LIMIT 1 ": [
  {
   "bar": 0,
   "foo": 0
  }
 ],
 "033 Not combined with AND: SELECT * FROM test() WHERE 1 AND NOT foo = 2": [
  {
   "bar": 0,
   "foo": 0
  },
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "034 Not combined with AND 2: SELECT * FROM test() WHERE 0 AND NOT foo = 2": [],
 "035 Not combined with OR: SELECT * FROM test() WHERE 1 OR NOT foo = 20": [
  {
   "bar": 0,
   "foo": 0
  },
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "036 Not combined with OR 2: SELECT * FROM test() WHERE 0 OR NOT foo = 20": [
  {
   "bar": 0,
   "foo": 0
  },
  {
   "bar": 1,
   "foo": 2
  },
  {
   "bar": 2,
   "foo": 4
  }
 ],
 "037 Group by 1: SELECT foo, bar FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "foo": 4
  },
  {
   "bar": 5,
   "foo": 2
  }
 ],
 "038 Group by count: SELECT foo, bar, count(items=bar) FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "count(items=bar)": 2,
   "foo": 4
  },
  {
   "bar": 5,
   "count(items=bar)": 2,
   "foo": 2
  }
 ],
 "039 Group by count with where: SELECT foo, bar, count(items=bar) FROM groupbytest() WHERE foo \u003c 4 GROUP BY bar": [
  {
   "bar": 2,
   "count(items=bar)": 1,
   "foo": 3
  },
  {
   "bar": 5,
   "count(items=bar)": 2,
   "foo": 2
  }
 ],
 "040 Group by min: SELECT foo, bar, min(items=foo) FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "foo": 4,
   "min(items=foo)": 3
  },
  {
   "bar": 5,
   "foo": 2,
   "min(items=foo)": 1
  }
 ],
 "041 Group by max: SELECT foo, bar, max(items=foo) FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "foo": 4,
   "max(items=foo)": 4
  },
  {
   "bar": 5,
   "foo": 2,
   "max(items=foo)": 2
  }
 ],
 "042 Group by max of string: SELECT baz, bar, max(items=baz) FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "baz": "d",
   "max(items=baz)": "d"
  },
  {
   "bar": 5,
   "baz": "b",
   "max(items=baz)": "b"
  }
 ],
 "043 Group by min of string: SELECT baz, bar, min(items=baz) FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "baz": "d",
   "min(items=baz)": "c"
  },
  {
   "bar": 5,
   "baz": "b",
   "min(items=baz)": "a"
  }
 ],
 "044 Group by enumrate of string: SELECT baz, bar, enumerate(items=baz) FROM groupbytest() GROUP BY bar": [
  {
   "bar": 2,
   "baz": "d",
   "enumerate(items=baz)": [
    "c",
    "d"
   ]
  },
  {
   "bar": 5,
   "baz": "b",
   "enumerate(items=baz)": [
    "a",
    "b"
   ]
  }
 ],
 "045 Lazy row evaluation (Shoud panic if foo=2: SELECT foo, panic(column=foo, value=2) FROM test() WHERE foo = 4": [
  {
   "foo": 4,
   "panic(column=foo, value=2)": 2
  }
 ],
 "046 Quotes strings: SELECT 'foo\\'s quote' FROM scope()": [
  {
   "'foo\\'s quote'": "foo's quote"
  }
 ],
 "047 Test get(): SELECT get(item= [dict(foo=3), 2, 3, 4], member='0.foo') AS Foo FROM scope()": [
  {}
 ],
 "048 Test array index: LET BIN\u003c=SELECT * FROM test()": [],
 "049 Test array index 2: SELECT BIN, BIN[0] FROM scope()": [
  {
   "BIN": [
    {
     "bar": 0,
     "foo": 0
    },
    {
     "bar": 1,
     "foo": 2
    },
    {
     "bar": 2,
     "foo": 4
    }
   ],
   "BIN[0]": {
    "bar": 0,
    "foo": 0
   }
  }
 ],
 "050 Array concatenation: SELECT (1, 2) + (3, 4) FROM scope()": [
  {
   "(1, 2) + (3, 4)": [
    1,
    2,
    3,
    4
   ]
  }
 ],
 "051 Array concatenation to any: SELECT (1, 2) + 4 FROM scope()": [
  {
   "(1, 2) + 4": [
    1,
    2,
    4
   ]
  }
 ],
 "052 Array concatenation with if: SELECT (1, 2) + if(condition=1, then=(3, 4)) AS Field FROM scope()": [
  {
   "Field": [
    1,
    2,
    3,
    4
   ]
  }
 ],
 "053 Array concatenation with Null: SELECT (1, 2) + if(condition=0, then=(3, 4)) AS Field FROM scope()": [
  {
   "Field": [
    1,
    2
   ]
  }
 ]
}